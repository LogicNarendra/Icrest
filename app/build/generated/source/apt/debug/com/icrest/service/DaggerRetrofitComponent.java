// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.icrest.service;

import com.icrest.narendraicrest.HomePresenter;
import com.icrest.narendraicrest.HomePresenter_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

public final class DaggerRetrofitComponent implements RetrofitComponent {
  private Provider<HttpLoggingInterceptor> provideIntercepterProvider;

  private Provider<OkHttpClient> provideOkhttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private DaggerRetrofitComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideIntercepterProvider =
        DoubleCheck.provider(
            RetrofitClientModule_ProvideIntercepterFactory.create(builder.retrofitClientModule));
    this.provideOkhttpClientProvider =
        DoubleCheck.provider(
            RetrofitClientModule_ProvideOkhttpClientFactory.create(
                builder.retrofitClientModule, provideIntercepterProvider));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            RetrofitClientModule_ProvideRetrofitFactory.create(
                builder.retrofitClientModule, provideOkhttpClientProvider));
  }

  @Override
  public void inject(HomePresenter presenter) {
    injectHomePresenter(presenter);
  }

  private HomePresenter injectHomePresenter(HomePresenter instance) {
    HomePresenter_MembersInjector.injectRetrofitClient(instance, provideRetrofitProvider.get());
    return instance;
  }

  public static final class Builder {
    private RetrofitClientModule retrofitClientModule;

    private Builder() {}

    public RetrofitComponent build() {
      if (retrofitClientModule == null) {
        throw new IllegalStateException(
            RetrofitClientModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerRetrofitComponent(this);
    }

    public Builder retrofitClientModule(RetrofitClientModule retrofitClientModule) {
      this.retrofitClientModule = Preconditions.checkNotNull(retrofitClientModule);
      return this;
    }
  }
}
