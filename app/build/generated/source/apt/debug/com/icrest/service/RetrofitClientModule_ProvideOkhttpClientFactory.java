// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.icrest.service;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

public final class RetrofitClientModule_ProvideOkhttpClientFactory
    implements Factory<OkHttpClient> {
  private final RetrofitClientModule module;

  private final Provider<HttpLoggingInterceptor> intercepterProvider;

  public RetrofitClientModule_ProvideOkhttpClientFactory(
      RetrofitClientModule module, Provider<HttpLoggingInterceptor> intercepterProvider) {
    this.module = module;
    this.intercepterProvider = intercepterProvider;
  }

  @Override
  public OkHttpClient get() {
    return Preconditions.checkNotNull(
        module.provideOkhttpClient(intercepterProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<OkHttpClient> create(
      RetrofitClientModule module, Provider<HttpLoggingInterceptor> intercepterProvider) {
    return new RetrofitClientModule_ProvideOkhttpClientFactory(module, intercepterProvider);
  }

  public static OkHttpClient proxyProvideOkhttpClient(
      RetrofitClientModule instance, HttpLoggingInterceptor intercepter) {
    return instance.provideOkhttpClient(intercepter);
  }
}
